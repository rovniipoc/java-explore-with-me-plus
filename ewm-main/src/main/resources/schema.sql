-- DROP TABLE if EXISTS categories;
-- DROP TABLE if EXISTS users;
-- DROP TABLE if EXISTS events;
-- DROP TABLE if EXISTS compilations;
-- DROP TABLE if EXISTS requests;

CREATE TABLE if not EXISTS categories
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    name  VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS events
 (
     id                 BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
     annotation         VARCHAR NOT NULL,
     description        VARCHAR NOT NULL,
     event_date         TIMESTAMP,
     lat                DOUBLE PRECISION,
     lon                DOUBLE PRECISION,
     paid               BOOLEAN       NOT NULL,
     participant_limit  INTEGER       NOT NULL,
     request_moderation BOOLEAN       NOT NULL,
     state              VARCHAR       NOT NULL,
     title              VARCHAR       NOT NULL,
     created_on         TIMESTAMP     NOT NULL,
     published_on       TIMESTAMP,
     initiator_id       BIGINT        NOT NULL,
     category_id        BIGINT,
     views              INTEGER       NOT NULL,
     confirmed_requests BIGINT        NOT NULL,

    CONSTRAINT fk_initiator FOREIGN KEY (initiator_id)
        REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_category FOREIGN KEY (category_id)
        REFERENCES categories (id)
);

CREATE TABLE IF NOT EXISTS compilations
(
    id       BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    title    VARCHAR(255) NOT NULL,
    pinned   BOOLEAN      NOT NULL,
    event_id BIGINT,
    FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS requests
(
    id           BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    created      TIMESTAMP   NOT NULL,
    event_id     BIGINT      NOT NULL,
    requester_id BIGINT      NOT NULL,
    status       VARCHAR(20) NOT NULL,

    CONSTRAINT fk_event FOREIGN KEY (event_id)
        REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT fk_requester FOREIGN KEY (requester_id)
        REFERENCES users (id) ON DELETE CASCADE
);
